---
import type { Review } from '../data/courses';

export interface Props {
  reviews: Review[];
  rating: number;
  reviewCount: number;
}

const { reviews, rating, reviewCount } = Astro.props;

const renderStars = (rating: number, size: 'sm' | 'md' | 'lg' = 'md') => {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  const stars = [];
  
  for (let i = 0; i < fullStars; i++) {
    stars.push('full');
  }
  
  if (hasHalfStar) {
    stars.push('half');
  }
  
  while (stars.length < 5) {
    stars.push('empty');
  }
  
  const sizeClass = size === 'sm' ? 'w-4 h-4' : size === 'lg' ? 'w-6 h-6' : 'w-5 h-5';
  
  return stars.map((star, index) => {
    if (star === 'full') {
      return `<svg class="${sizeClass} text-yellow-400 fill-current" viewBox="0 0 24 24"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>`;
    } else if (star === 'half') {
      return `<svg class="${sizeClass} text-yellow-400" viewBox="0 0 24 24"><defs><linearGradient id="half-star-${index}"><stop offset="50%" stop-color="currentColor"/><stop offset="50%" stop-color="#e5e7eb"/></linearGradient></defs><path fill="url(#half-star-${index})" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>`;
    } else {
      return `<svg class="${sizeClass} text-gray-300 fill-current" viewBox="0 0 24 24"><path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/></svg>`;
    }
  }).join('');
};

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  });
};
---

<div class="reviews-section">
  <!-- Reviews Header -->
  <div class="mb-8">
    <div class="flex items-center justify-between mb-6">
      <h3 class="text-2xl font-bold text-gray-900">Reviews & Ratings</h3>
      <button class="text-emerald-600 hover:text-emerald-700 font-medium text-sm">
        Write a Review
      </button>
    </div>
    
    <!-- Overall Rating Summary -->
    <div class="bg-gray-50 rounded-xl p-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class="text-4xl font-bold text-gray-900 mr-4">{rating}</div>
          <div>
            <div class="flex items-center mb-1" set:html={renderStars(rating, 'lg')}>
            </div>
            <div class="text-gray-600">Based on {reviewCount} reviews</div>
          </div>
        </div>
        
        <!-- Rating Breakdown -->
        <div class="text-right min-w-0 flex-1 ml-8 max-w-xs">
          {[5,4,3,2,1].map(stars => {
            const count = Math.floor(Math.random() * (reviewCount / 5)) + (stars === 5 ? Math.floor(reviewCount * 0.4) : stars === 4 ? Math.floor(reviewCount * 0.3) : Math.floor(reviewCount * 0.1));
            const percentage = Math.round((count / reviewCount) * 100);
            return (
              <div class="flex items-center text-sm mb-1">
                <span class="w-8 text-gray-600">{stars}â˜…</span>
                <div class="flex-1 bg-gray-200 rounded-full h-2 mx-2">
                  <div class="bg-yellow-400 h-2 rounded-full" style={`width: ${percentage}%`}></div>
                </div>
                <span class="w-8 text-gray-600 text-right">{count}</span>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Individual Reviews -->
  <div class="space-y-6">
    {reviews.map((review) => (
      <div class="bg-white border border-gray-200 rounded-xl p-6">
        <div class="flex items-start justify-between mb-4">
          <div class="flex items-center">
            <!-- Avatar Placeholder -->
            <div class="w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center mr-3">
              <span class="text-emerald-600 font-semibold text-sm">
                {review.author.split(' ').map(n => n[0]).join('')}
              </span>
            </div>
            <div>
              <div class="font-semibold text-gray-900">{review.author}</div>
              <div class="flex items-center">
                <div class="flex items-center mr-2" set:html={renderStars(review.rating, 'sm')}>
                </div>
                <span class="text-sm text-gray-600">{formatDate(review.date)}</span>
              </div>
            </div>
          </div>
          
          <!-- Review Menu -->
          <button class="text-gray-400 hover:text-gray-600">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
            </svg>
          </button>
        </div>
        
        <!-- Review Content -->
        <p class="text-gray-700 mb-4 leading-relaxed">{review.comment}</p>
        
        <!-- Review Actions -->
        <div class="flex items-center justify-between text-sm">
          <button class="flex items-center text-gray-500 hover:text-emerald-600 transition-colors">
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V18m-7-8a2 2 0 01-2-2V6a2 2 0 012-2h2.343M11 7L9 5l-2 2m0 0v.01M7 7v.01"/>
            </svg>
            Helpful ({review.helpful})
          </button>
          
          <button class="text-gray-500 hover:text-gray-700 transition-colors">
            Reply
          </button>
        </div>
      </div>
    ))}
    
    <!-- Load More Reviews -->
    {reviewCount > reviews.length && (
      <div class="text-center pt-6">
        <button class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
          Load More Reviews ({reviewCount - reviews.length} remaining)
        </button>
      </div>
    )}
    
    <!-- Write Review CTA -->
    <div class="bg-emerald-50 rounded-xl p-6 text-center">
      <h4 class="text-lg font-semibold text-gray-900 mb-2">
        Share Your Experience
      </h4>
      <p class="text-gray-600 mb-4">
        Help other mini golf enthusiasts by sharing your review of this course.
      </p>
      <button class="px-6 py-3 bg-emerald-600 text-white font-medium rounded-lg hover:bg-emerald-700 transition-colors">
        Write a Review
      </button>
    </div>
  </div>
</div>

<script>
  // Simple review interactions
  document.addEventListener('DOMContentLoaded', () => {
    // Handle helpful votes
    const helpfulButtons = document.querySelectorAll('.reviews-section button');
    helpfulButtons.forEach(button => {
      if (button.textContent?.includes('Helpful')) {
        button.addEventListener('click', () => {
          button.classList.add('text-emerald-600');
          // In a real app, this would make an API call
        });
      }
    });
  });
</script>