---
import type { Course } from '../data/courses';

export interface Props {
  course: Course;
  featured?: boolean;
}

const { course, featured = false } = Astro.props;

const renderStars = (rating: number) => {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  const stars = [];
  
  for (let i = 0; i < fullStars; i++) {
    stars.push('full');
  }
  
  if (hasHalfStar) {
    stars.push('half');
  }
  
  while (stars.length < 5) {
    stars.push('empty');
  }
  
  return stars;
};

const stars = renderStars(course.rating);
---

<div class={`bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 ${featured ? 'ring-2 ring-emerald-500' : ''}`}>
  {featured && (
    <div class="bg-emerald-500 text-white text-sm font-medium px-3 py-1 text-center">
      ⭐ Featured Course
    </div>
  )}
  
  <div class="aspect-video bg-gradient-to-br from-emerald-100 to-blue-100 relative overflow-hidden">
    <div class="absolute inset-0 flex items-center justify-center">
      <div class="text-center">
        <div class="text-4xl mb-2">⛳</div>
        <div class="text-sm text-gray-600">Course Image</div>
      </div>
    </div>
  </div>
  
  <div class="p-6">
    <div class="flex justify-between items-start mb-3">
      <h3 class="text-xl font-bold text-gray-900 leading-tight">
        <a href={`/courses/${course.slug}`} class="hover:text-emerald-600 transition-colors">
          {course.name}
        </a>
      </h3>
      <span class="text-sm font-semibold text-emerald-600 bg-emerald-50 px-2 py-1 rounded">
        {course.priceRange}
      </span>
    </div>
    
    <div class="flex items-center mb-3">
      <div class="flex items-center space-x-1 mr-2">
        {stars.map((star) => (
          star === 'full' ? (
            <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          ) : star === 'half' ? (
            <svg class="w-4 h-4 text-yellow-400" viewBox="0 0 24 24">
              <defs>
                <linearGradient id="half-star">
                  <stop offset="50%" stop-color="currentColor"/>
                  <stop offset="50%" stop-color="#e5e7eb"/>
                </linearGradient>
              </defs>
              <path fill="url(#half-star)" d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          ) : (
            <svg class="w-4 h-4 text-gray-300 fill-current" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          )
        ))}
      </div>
      <span class="text-sm text-gray-600">
        {course.rating} ({Math.floor(Math.random() * 50) + 10} reviews)
      </span>
    </div>
    
    <p class="text-gray-600 text-sm mb-4 line-clamp-2">
      {course.description}
    </p>
    
    <div class="flex items-center text-sm text-gray-500 mb-4">
      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
      </svg>
      {course.city}, {course.state}
    </div>
    
    <div class="flex flex-wrap gap-1 mb-4">
      {course.features.slice(0, 3).map((feature) => (
        <span class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
          {feature}
        </span>
      ))}
      {course.features.length > 3 && (
        <span class="text-xs text-gray-500">+{course.features.length - 3} more</span>
      )}
    </div>
    
    <div class="flex justify-between items-center">
      <a 
        href={`/courses/${course.slug}`}
        class="text-emerald-600 hover:text-emerald-700 font-medium text-sm transition-colors"
      >
        View Details →
      </a>
      <div class="flex items-center text-xs text-gray-500">
        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        Open Today
      </div>
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>